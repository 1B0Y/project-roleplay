--[[
	Project: SourceMode
	Version: 1.1
	Last Edited: 28/10/2014 (Jack)
	Authors: Jack
]]--

--Custom events
addEvent("onPlayerLoggedOut",true)
addEvent("onPlayerAddCharacter",true)
addEvent("onPlayerDeleteCharacter",true)
addEvent("onPlayerSelectCharacter",true)
addEvent("onPlayerChangeCharacter",true)
addEvent("onPlayerCreateNewCharacter",true)
addEvent("checkCharacterName",true)

--Some vars we need
local defPosition = "[ [ 2036.578125, 1543.389648, 10.8203125, 90 ] ]"
local defWeapons = "[ [ ] ]"
local blockedWeapons = {[35]=true,[36]=true,[38]=true,[17]=true,[39]=true,[9]=true}

function onPlayerSelectCharacter(data)
	if not client or not isElement(client) then return false end
	if not isPlayerLoggedIn(client) then return false end
	if not data then return false end
	
	spawnCharacter(client,data)
	triggerClientEvent(client,"characters:toggleGUI",client,"all",true,false)
	triggerClientEvent(client,"setPlayerGaming",client,true)
	outputChatBox(getPlayerName(client).." has joined the game.",root,0,255,0)
	return true
end
addEventHandler("onPlayerSelectCharacter",root,onPlayerSelectCharacter)

function onCharacterChange(player)
	outputDebugString("onPlayerChangeCharacter()")

	if not client then
		client = player
	end
	
	if not client or not isElement(client) or not getElementType(client) == "player" then error("Player not found") end
	outputDebugString("Despawning character...")
	despawnCharacter(client)
	triggerClientEvent(client,"characters:toggleGUI",client,"characters",true,true)
	triggerClientEvent(client,"characters:toggleGUI",client,"play",true,true)
	triggerClientEvent(client,"setPlayerGaming",client,false)
	switchCamera(client,"character")
	flushAccountData(getPlayerAccount(source)) --Force-save the account data
end
addEventHandler("onPlayerChangeCharacter",root,onCharacterChange)

function onPlayerLoggedOut()
	if not source or not isElement(source) then return false end
	despawnCharacter(source)
	triggerClientEvent(source,"characters:toggleGUI",source,"all",true,false)
	removeElementData(source,"character")
	flushAccountData(getPlayerAccount(source)) --Force-save the account data
end
addEventHandler("onPlayerLoggedOut",root,onPlayerLoggedOut)

function onPlayerQuit()
	if not source or not isElement(source) then return false end
	despawnCharacter(source)
	flushAccountData(getPlayerAccount(source)) --Force-save the account data
end
addEventHandler("onPlayerQuit",root,onPlayerQuit)

function sendPlayerCharacters()
	if not source or not isElement(source) then return false end
	if not isPlayerLoggedIn(source) then return false end
	
	local characters = loadCharacterData(source)
	triggerClientEvent(source,"sendPlayerCharacters",source,characters)
	triggerClientEvent(source,"characters:toggleGUI",source,"characters",true,true)
	triggerClientEvent(source,"characters:toggleGUI",source,"play",true,true)
	switchCamera(player,"character")
end
addEventHandler("onAccountDataLoaded",root,sendPlayerCharacters)

function checkCharacterName(name)
	if not client or not isElement(client) then return false end
	if not name or name:len() < 3 then return false end
	
	local available = isCharacterNameAvailable(client,name)
	triggerClientEvent(client,"returnCharacterNameCheck",client,available,name)
end
addEventHandler("checkCharacterName",root,checkCharacterName)

function onAttemptCreateCharacter(name,skin,colors)
	--Vars should already be here, otherwise we're cancelling.
	if not client or not isElement(client) then return false end
	if not name then return false end
	if not skin then return false end
	if not colors then return false end
	
	if (addCharacter(client,name,skin,colors)) then
		local characters = loadCharacterData(client) --Load the new data
		triggerClientEvent(client,"onCharacterCreated",client,characters)
	end
	return false --System error.
end
addEventHandler("onPlayerCreateNewCharacter",root,onAttemptCreateCharacter)

function onAttemptDeleteCharacter(name)
	if not client or not isElement(client) then return false end
	if not name then return false end
	if (deleteCharacter(client,name)) then
		local characters = loadCharacterData(client)
		triggerClientEvent(client,"onCharacterDeleted",client,nil,characters)
		return true
	end
	return false --System error.
end
addEventHandler("onPlayerDeleteCharacter",root,onAttemptDeleteCharacter)
	

--[[
			PRE-SCRIPTED FUNCTIONS BELOW, DON'T TOUCH!			
]]

--loadCharacterData
function loadCharacterData(player)
	if not player or not isElement(player) then return false end
	if not isPlayerLoggedIn(player) then return false end
	if not isAccountDataLoaded(getPlayerAccount(player)) then return false end
		
	local account = getPlayerAccount(player)
	local characters = getAccountData(account,"characters")
	
	return characters or "[ [ ] ]"
end

--spawnCharacter
function spawnCharacter(player,data)
	--make sure we have all required info before we go ahead
	if not player or not isElement(player) then return false end
	if not isPlayerLoggedIn(player) then return false end
	if not data then return false end
	
	--Parse the data we need
	account = getPlayerAccount(player)
	health = getAccountData(account,"health") or 100
	armor = getAccountData(account,"armor") or 0
	interior = getAccountData(account,"interior") or 0
	dimension = getAccountData(account,"dimension") or 0
	money = getAccountData(account,"money") or 0
	weapons = fromJSON(getAccountData(account,"weapons") or defWeapons)
	position = fromJSON(getAccountData(account,"position") or defPosition)
	x,y,z = position[1],position[2],position[3],position[4]
	colors = data.color
	skin = data.model
	if (math.floor(health) <= 0) then health = 0 end
	
	--do some prepping
	fadeCamera(player,false,1.0,0,0,0)
	setElementFrozen(player,false)
	triggerClientEvent(player,"characters:toggleGUI",player,"input",nil,false)
	showCursor(player,false)
	showPlayerHudComponent(player,"all",true)
	setPlayerMoney(player,money)
	setElementData(player,"character",data.charName)
	setPlayerNametagColor(player,colors[1],colors[2],colors[3]) --Set the player's nametag color based on his character.
	
	--spawn
	setTimer(
		function()
			fadeCamera(player,true,1.0)
			spawnPlayer(player,x,y,z,rot,skin,interior,dimension,getTeamFromName("Player"))
			setCameraTarget(player)
			setElementHealth(player,health)
			setPedArmor(player,armor)
			
			for k,v in pairs(weapons) do
				if (k ~= blockedWeapons[k]) then
					giveWeapon(player,k,v)
				end
			end
		end, 1000, 1
	)
	triggerEvent("onPlayerSpawned",player)
	triggerClientEvent("callSpawnTrigger",player)
	triggerClientEvent(source,"updatePlayerSpawnState",source,true)
	return true
end
	
--despawnCharacter
function despawnCharacter(player)
	if not player or not isElement(player) then return false end
	
	saveCharacterData(player)
	setElementDimension(player,1)
	setElementPosition(player,0,0,-5)
	setElementFrozen(player,true)
	setPlayerMoney(player,0) --Set it to this just incase.
	triggerEvent("onPlayerDespawned",player)
	setTimer(triggerClientEvent,250,1,player,"callDespawnTrigger",player)
	removeElementData(player,"character")
	setTimer(triggerClientEvent,250,1,player,"updatePlayerSpawnState",player,false)
end

--saveCharacterData
function saveCharacterData(player)
	--Make sure we have no bad stuff. If we do, we'll stop here.
	if not player or not isElement(player) then return false end
	if not isPlayerLoggedIn(player) then return false end
	if not getElementData(player,"character") then return false end --He was never spawned.
	
	--Get all our vars ready
	local account = getPlayerAccount(player)
	local weapons = toJSON(exports.utils:getPlayerWeapons(player))
	local x,y,z = getElementPosition(player)
	local _,_,rot = getElementRotation(player)
	local position = toJSON({x,y,z,rot})
	
	--Now to update our data!
	setAccountData(account,"health",getElementHealth(player))
	setAccountData(account,"armor",getPedArmor(player))
	setAccountData(account,"interior",getElementInterior(player))
	setAccountData(account,"dimension",getElementDimension(player))
	setAccountData(account,"weapons",weapons)
	setAccountData(account,"position",position)
	setAccountData(account,"money",getPlayerMoney(player))
end

--addCharacters
function addCharacter(player,name,skin,colors)
	--Make sure we have no bad stuff!
	if not player or not isElement(player) then return false end
	if not isPlayerLoggedIn(player) then return false end
	if not name or #name < 3 then return false end
	if not skin then return false end
	
	if (isCharacterNameAvailable(player,name) == false) then 
		return false
	end
	
	--Get all our vars ready
	local account = getPlayerAccount(player)
	local characters = fromJSON(getAccountData(account,"characters") or "[ [ ] ]")
	
	--Add the character
	table.insert(characters,{charName=name, model=skin, color=colors})
	setAccountData(account,"characters",toJSON(characters))
	return true
end

--deleteCharacter
function deleteCharacter(player,name)
	--Make sure we have no bad stuff!
	if not player or not isElement(player) then return false end
	if not isPlayerLoggedIn(player) then return false end
	if not name or #name < 3 then return false end
	
	local account = getPlayerAccount(player)
	local characters = fromJSON(getAccountData(account,"characters")) or "[ [ ] ]"
	if (#characters < 1) then return false end --We have no characters to delete.
	
	for k,v in pairs(characters) do
		if (v.charName == name) then
			characters[k] = nil
			setAccountData(account,"characters",toJSON(characters))
			return true
		end
	end
	return false
end

--isCharacterNameAvailable
function isCharacterNameAvailable(player,name)
	if not player or not isElement(player) then return false end
	if not isPlayerLoggedIn(player) then return false end
	
	local account = getPlayerAccount(player)
	local characters = loadCharacterData(player)
	local characters = fromJSON(characters)
	
	local found = false
	for k,v in pairs(characters) do
		if (v.charName == name) then
			found = true
			break
		end
	end

	return not found --If name is true, set it false and vise-versa.
end